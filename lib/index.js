!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var s=e();for(var a in s)("object"==typeof exports?exports:t)[a]=s[a]}}(self,(()=>(()=>{"use strict";var t={d:(e,s)=>{for(var a in s)t.o(s,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:s[a]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{DictContainer:()=>i,Dictionary:()=>r,PageStatus:()=>p,dictContainer:()=>n});const s=Array.isArray,a=t=>t instanceof Map;class r{#t;#e=(()=>new Map)();constructor(t){this.#s(t)}getVal(t){return this.#t.get(t)}values(){return Array.from(this.#t.values())}keys(){return Array.from(this.#t.keys())}getKey(t){for(let[e,s]of this.#t.entries())if(s===t)return e}hasValue(t){for(let e of this.values())if(e===t)return!0;return!1}#s(t){if(s(t)||a(t))this.#t=new Map(t);else{if("object"!=typeof(e=t)||null===e)throw new Error("type of data is invalid");this.#t=r.toMap(t)}var e}[Symbol.iterator](){return this.#t[Symbol.iterator]()}addLinkMap(t,e){const s=arguments.length>2&&void 0!==arguments[2]&&arguments[2]?this.convertLinkMap(e):e;this.#e.set(t,new r(s))}linkOf(t){if(!this.#e.has(t))throw new Error("linkMap has no key:",t);return this.#e.get(t)}getLinkVal(t,e){return this.linkOf(t).getVal(e)}convertLinkMap(t){return this.values().map(((e,s)=>[e,t[s]]))}static toMap(t){return a(t)?t:new Map(Object.entries(t))}get value(){return Object.fromEntries(this.#t)}}class i{#a=(()=>new Map)();getDict(t){if(!this.#a.has(t))throw new Error(`dictionary ${t} is not exist`);return this.#a.get(t)}addDict(t,e){if(this.#a.has(t))throw new Error(`dictionary ${t} is already exist`);this.#a.set(t,new r(e))}}const n=new i,o="ADD",u="EDIT",l="VIEW";class p{status;statusMap=(()=>new Map([[o,o],[u,u],[l,l]]))();constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;this.status=t}changeStatus(t){if(!this.statusMap.has(t))throw new Error(`${t} is not a valid status`);this.status=this.statusMap.get(t)}isStatus(t){return this.status===this.statusMap.get(t)}fetchStatus(t){return t.some((t=>this.isStatus(t)))}get status(){return this.status}get isAdd(){return this.isStatus(o)}get isEdit(){return this.isStatus(u)}get isView(){return this.isStatus(l)}get statusEnum(){return this.statusMap}}return e})()));